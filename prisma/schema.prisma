// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String    @db.String
    prompt    String    @db.String
    photo     String    @db.String
    User      User?     @relation(fields: [userId], references: [id])
    userId    String?   @db.ObjectId
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String    @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String    @db.ObjectId
    type                     String    @db.String
    provider                 String    @db.String
    providerAccountId        String    @db.String
    refresh_token            String?   @db.String
    access_token             String?   @db.String
    expires_at               Int?
    token_type               String?   @db.String
    scope                    String?   @db.String
    id_token                 String?   @db.String
    session_state            String?   @db.String
    refresh_token_expires_in Int?
    user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt                DateTime? @default(now())
    updatedAt                DateTime? @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @db.String
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?   @db.String
    email         String?   @unique @db.String
    emailVerified DateTime?
    image         String?   @db.String
    createdAt     DateTime? @default(now())
    updatedAt     DateTime? @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String   @db.String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
